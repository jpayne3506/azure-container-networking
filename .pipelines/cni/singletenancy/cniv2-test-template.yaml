parameters:
  dependsOn: ""
  name: ""
  clusterType: ""
  clusterName: ""
  nodeCount: ""
  vmSize: ""
  windowsVMSize: ""
  os: ""
  cni: ""

stages:
  - stage: ${{ parameters.clusterName }}
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    dependsOn: ${{ parameters.dependsOn }} # setup
    displayName: "Create Cluster - ${{ parameters.cni }}"
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['SetEnvVars.commitID'] ]
    jobs:
      - job: create_aks_cluster_with_${{ parameters.name }}
        steps:
          - template: ../load-test-templates/create-cluster-template.yaml
            parameters:
              clusterType: ${{ parameters.clusterType }}
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              nodeCount: ${{ parameters.nodeCount }}
              vmSize: ${{ parameters.vmSize }}
              windowsVMSize: ${{ parameters.windowsVMSize }}
              region: $(LOCATION)


  - stage:  update_cni
    dependsOn:
      - ${{ parameters.clusterName }}
      - build_images
      - setup
    displayName: "Update CNI on Cluster"
    variables:
      dropgzVersion: $[ stagedependencies.setup.env.outputs['SetEnvVars.dropgzVersion'] ]
    jobs:
      - job: deploy_pods
        strategy:
          matrix:
            windows_cniv1_amd64:
              os: windows
              arch: amd64
              os_version: ltsc2022
            linux_swift_amd64:
              os: linux
              arch: amd64
            linux_overlay_amd64:
              os: linux
              arch: amd64
        steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                set -ex
                echo "Upload CNI"
                if [ "$(os)" == "windows" ]; then
                  export DROP_GZ_URL=$( make cni-dropgz-image-name-and-tag OS='linux' ARCH=$(arch) CNI_DROPGZ_VERSION=$(dropgzVersion)
                  envsubst < ./test/integration/manifests/cni/cni-installer-v1.yaml | kubectl apply -f -
                  kubectl rollout status daemonset/azure-cni -n kube-system
                  echo "Deploying on windows nodes"
                  export DROP_GZ_URL=$( make cni-dropgz-image-name-and-tag OS='windows' ARCH=$(arch)  OS_VERSION=$(os_version) CNI_DROPGZ_VERSION=$(dropgzVersion)
                  envsubst < ./test/integration/manifests/cni/cni-installer-v1-windows.yaml | kubectl apply -f -
                  kubectl rollout status daemonset/azure-cni-windows -n kube-system
                else
                  export DROP_GZ_URL=$( make cni-dropgz-image-name-and-tag OS=$(os) ARCH=$(arch) CNI_DROPGZ_VERSION=$(dropgzVersion)
                  envsubst < ./test/integration/manifests/cni/cni-installer-v1.yaml | kubectl apply -f -
                  kubectl rollout status daemonset/azure-cni -n kube-system
                fi
            name: "UploadCNI"
            displayName: "Upload CNI"
          - script: |
              set -ex
              kubectl rollout status daemonset/azure-cni-windows -n kube-system
              kubectl get pods -A
            name: "WaitForCNI"
            displayName: "Wait For CNI"
  - stage: pod_deployment_windows
    dependsOn: update_cni
    displayName: "Pod Deployment"
    jobs:
      - job: deploy_pods
        steps:
          - template: ../load-test-templates/pod-deployment-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}
              scaleup: ${WINDOWS_SCALEUP}
              os: ${{ parameters.os }}
              cni: ${{ parameters.cni }}
              iterations: ${WINDOWS_ITERATIONS}
  - stage: validate_state_windows
    dependsOn: pod_deployment_windows
    displayName: "Validate State"
    jobs:
      - job: validate_state
        steps:
          - template: ../load-test-templates/validate-state-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}
              os: ${{ parameters.os }}
              cni: ${{ parameters.cni }}

