parameters:
  dependsOn: ""
  name: ""
  clusterType: ""
  clusterName: ""
  nodeCount: ""
  vmSize: ""
  windowsVMSize: ""
  os: ""
  cni: ""

stages:
  - stage: createAKSclusterWindows
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    dependsOn: ${{ parameters.dependsOn }}
    displayName: "Windows AKS Cluster ${{ parameters.cni }}"
    jobs:
      - job: create_aks_cluster_with_${{ parameters.name }}
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - template: ../load-test-templates/create-cluster-template.yaml
            parameters:
              clusterType: ${{ parameters.clusterType }}
              clusterName: ${{ parameters.clusterName }}
              nodeCount: ${{ parameters.nodeCount }}
              vmSize: ${{ parameters.vmSize }}
              windowsVMSize: ${{ parameters.windowsVMSize }}
  # - stage: build_images
  #   pool:
  #     name: $(BUILD_POOL_NAME_DEFAULT)
  #   dependsOn: ${{ parameters.dependsOn }}
  #   displayName: "Build CNI Images"
  #   jobs:
  #     - job: build_cni_images
  #       pool:
  #         name: "$(BUILD_POOL_NAME_LINUX_AMD64)"
  #       strategy:
  #         matrix:
  #           cni_dropgz_windows2022_amd64:
  #             arch: amd64
  #             name: cni-dropgz-test
  #             os: windows
  #             os_version: ltsc2022
  #       steps:
  #         - template: ../../containers/container-template.yaml
  #           parameters:
  #             arch: $(arch)
  #             name: $(name)
  #             os: $(os)
  #             os_version: $(os_version)
  - stage:  ${{ parameters.name }}
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    dependsOn:
      - createAKSclusterWindows
      - build_images
    displayName: "Update CNI on Cluster"
    jobs:
      - job: update_cni
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            cni_dropgz_windows2022_amd64:
              os: windows
              arch: amd64
              os_version: ltsc2022
        steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                set -ex
                clusterName=${{ parameters.clusterName }}-$(make revision)
                make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${clusterName}
                make -C ./hack/aks azcfg AZCLI=az REGION=$(LOCATION)
                dropgz_version=$(make cni-dropgz-version)
                export DROP_GZ_URL=$( make cni-dropgz-test-image-name-and-tag OS=$(os) ARCH=$(arch) OS_VERSION=$(os_version) CNI_DROPGZ_VERSION=${dropgz_version})
                envsubst < ./test/integration/manifests/cni/cni-installer-v1-windows.yaml | kubectl apply -f -
            name: "UploadCNI"
            displayName: "Upload CNI"
          - script: |
              set -ex
              kubectl rollout status daemonset/azure-cni-windows -n kube-system
              kubectl get pods -A
            name: "WaitForCNI"
            displayName: "Wait For CNI"
      - template: ../k8s-e2e/k8s-e2e-job-template.yaml
        parameters:
          sub: $(TEST_SUB_SERVICE_CONNECTION)
          clusterName: ${{ parameters.clusterName }}
          os: ${{ parameters.os }}
          dependsOn: update_cni
          datapath: true
          dns: true
          portforward: true
          hybridWin: true
          service: true
          hostport: true
      - job: deploy_pods
        dependsOn: cni_k8se2e
        steps:
          - template: ../load-test-templates/pod-deployment-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}
              scaleup: ${WINDOWS_SCALEUP}
              os: ${{ parameters.os }}
              cni: ${{ parameters.cni }}
              iterations: ${WINDOWS_ITERATIONS}
      - job: validate_state
        dependsOn: deploy_pods
        steps:
          - template: ../load-test-templates/validate-state-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}
              os: ${{ parameters.os }}
              cni: ${{ parameters.cni }}
  # - stage: delete_resources
  #   pool:
  #     name: $(BUILD_POOL_NAME_DEFAULT)
  #   displayName: "Delete Resources"
  #   dependsOn:
  #     - validate_state_windows
  #   jobs:
  #     - job: delete_resources
  #       pool:
  #         name: "$(BUILD_POOL_NAME_DEFAULT)"
  #       steps:
  #         - task: AzureCLI@1
  #           inputs:
  #             azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
  #             scriptLocation: "inlineScript"
  #             scriptType: "bash"
  #             addSpnToEnvironment: true
  #             inlineScript: |
  #               set -ex
  #               if [ "$(DELETE_RESOURCES)" ]
  #               then
  #                 echo "Deleting Cluster and resource group"
  #                 make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}-$(make revision)
  #                 make -C ./hack/aks azcfg AZCLI=az REGION=$(LOCATION)
  #                 make -C ./hack/aks down AZCLI=az REGION=$(LOCATION) SUB=$(SUBSCRIPTION_ID) CLUSTER=${{ parameters.clusterName }}-$(make revision)
  #                 echo "Cluster and resources down"
  #               else
  #                 echo "Deletion of resources is False"
  #               fi
  #           name: "CleanUpCluster"
  #           displayName: "Cleanup cluster"
  #   condition: always()
