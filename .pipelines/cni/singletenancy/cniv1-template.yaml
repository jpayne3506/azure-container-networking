parameters:
  dependsOn: ""
  name: ""
  clusterType: ""
  clusterName: ""
  nodeCount: ""
  vmSize: ""
  windowsVMSize: ""
  os: ""
  arch: ""
  scaleup: 100
  iterations: 3
  os_version: ""

# CNIv1
# + Should be able to scale up/down the pods successfully certain number of times.
# + Node reboot scenarios should be covered.
# + The azure-vnet state should be validated with that of CNI state.
# + Pods should have ips assigned and connectivity/datapath test should be present.
# Windows
# + The HNS state should be validated with that of CNI state.


stages:
  - stage: create_${{ parameters.name }}
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['SetEnvVars.commitID'] ]
      npmVersion: $[ stagedependencies.setup.env.outputs['SetEnvVars.npmVersion'] ]
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    dependsOn:
      - setup
    displayName: "Create Cluster - ${{ parameters.clusterName }}"
    jobs:
      - job: create_aks_cluster_with_${{ parameters.name }}
        steps:
          - template: ../load-test-templates/create-cluster-template.yaml
            parameters:
              clusterType: ${{ parameters.clusterType }}
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              nodeCount: ${{ parameters.nodeCount }}
              vmSize: ${{ parameters.vmSize }}
              windowsVMSize: ${{ parameters.windowsVMSize }}
              region: $(LOCATION)

  - stage: ${{ parameters.name }}
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['SetEnvVars.commitID'] ]
      npmVersion: $[ stagedependencies.setup.env.outputs['SetEnvVars.npmVersion'] ]
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    dependsOn:
      - create_${{ parameters.name }}
      - publish
      - setup
    displayName: "CNIv1 Test - ${{ parameters.name }}"
    jobs:
      - job: update_cni
        steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                set -ex
                make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}-$(commitID)
                echo "Upload CNI"
                if [ "${{parameters.os}}" == "windows" ]; then
                  export DROP_GZ_URL=$( make cni-dropgz-test-image-name-and-tag OS='linux' ARCH=${{ parameters.arch }} CNI_DROPGZ_VERSION=${{ parameters.version }})
                  envsubst < ./test/integration/manifests/cni/cni-installer-v1.yaml | kubectl apply -f -
                  kubectl rollout status daemonset/azure-cni -n kube-system
                  echo "Deploying on windows nodes"
                  export DROP_GZ_URL=$( make cni-dropgz-test-image-name-and-tag OS='windows' ARCH=${{ parameters.arch }}  OS_VERSION=${{ parameters.os_version }} CNI_DROPGZ_VERSION=${{ parameters.version }})
                  envsubst < ./test/integration/manifests/cni/cni-installer-v1-windows.yaml | kubectl apply -f -
                  kubectl rollout status daemonset/azure-cni-windows -n kube-system
                else
                  export DROP_GZ_URL=$( make cni-dropgz-test-image-name-and-tag OS=${{ parameters.os }} ARCH=${{ parameters.arch }} CNI_DROPGZ_VERSION=${{ parameters.version }})
                  envsubst < ./test/integration/manifests/cni/cni-installer-v1.yaml | kubectl apply -f -
                  kubectl rollout status daemonset/azure-cni -n kube-system
                fi
                kubectl get pods -A -owide
            name: "UploadCNI"
            displayName: "Upload CNI"
      - job: deploy_pods
        displayName: "Scale Test"
        dependsOn: update_cni
        steps:
          - template: ../load-test-templates/pod-deployment-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              scaleup: ${{ parameters.scaleup }}
              os: ${{ parameters.os }}
              iterations: ${{ parameters.iterations }}
          - template: ../load-test-templates/validate-state-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              os: ${{ parameters.os }}
              cni: cniv1
      - job: restart_nodes
        displayName: "Restart Test"
        dependsOn: deploy_pods
        steps:
          - template: ../load-test-templates/restart-node-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
          - template: ../load-test-templates/validate-state-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              os: ${{ parameters.os }}
              cni: cniv1
              restartCase: "true"
      - job: recover
        displayName: "Recover Resources"
        dependsOn: deploy_pods
        steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                echo "Delete load-test Namespace"
                make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}-$(commitID)
                kubectl delete ns load-test
                kubectl cluster-info
                kubectl get po -owide -A
            name: "recover"
            displayName: "Delete test Namespaces"
      - template: ../k8s-e2e/k8s-e2e-job-template.yaml
        parameters:
          sub: $(TEST_SUB_SERVICE_CONNECTION)
          clusterName: ${{ parameters.clusterName }}-$(commitID)
          os: ${{ parameters.os }}
          dependsOn: recover
          datapath: true
          dns: true
          portforward: true
          hybridWin: true
          service: true
          hostport: true
      - template: ../../npm/npm-cni-integration-test.yaml
        parameters:
          clusterName: ${{ parameters.clusterName }}-$(commitID)
          os: ${{ parameters.os }}
          sub: $(TEST_SUB_SERVICE_CONNECTION)
          os_version: ${{ parameters.os_version }}
          tag: $(npmVersion)
          dependsOn: cni_k8se2e
