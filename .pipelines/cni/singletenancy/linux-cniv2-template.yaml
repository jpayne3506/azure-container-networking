parameters:
  dependsOn: ""
  name: ""
  clusterType: ""
  clusterName: ""
  nodeCount: ""
  vmSize: ""
  windowsVMSize: ""
  os: linux
  cni: ""

stages:
  - stage: ${{ parameters.clusterName }}
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    dependsOn: ${{ parameters.dependsOn }} # Setup, will add manifest stage once distros are added
    displayName: "Create Cluster - ${{ parameters.clusterName }}"
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['SetEnvVars.commitID'] ]
    jobs:
      - job: create_aks_cluster_with_${{ parameters.name }}
        steps:
          - template: ../load-test-templates/create-cluster-template.yaml
            parameters:
              clusterType: ${{ parameters.clusterType }}
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              nodeCount: ${{ parameters.nodeCount }}
              vmSize: ${{ parameters.vmSize }}
              region: $(LOCATION)

  - stage:  ${{ parameters.name }}
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['SetEnvVars.commitID'] ]
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    dependsOn:
      - createAKSclusterWindows
      - build_images
    displayName: "Update CNI on Cluster"
    jobs:
      - job: update_cni
        strategy:
          matrix:
          # Remove one for respective tests
            linux_swift_amd64:
              os: linux
              arch: amd64
            linux_overlay_amd64:
              os: linux
              arch: amd64
        steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                set -ex
                clusterName=${{ parameters.clusterName }}-$(commitID)
                make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${clusterName}
                make -C ./hack/aks azcfg AZCLI=az REGION=$(LOCATION)
                dropgz_version=$(make cni-dropgz-version)
                export DROP_GZ_URL=$( make cni-dropgz-test-image-name-and-tag OS=$(os) ARCH=$(arch) OS_VERSION=$(os_version) CNI_DROPGZ_VERSION=${dropgz_version})
                envsubst < ./test/integration/manifests/cni/cni-installer-v1-windows.yaml | kubectl apply -f -
            name: "UploadCNI"
            displayName: "Upload CNI"
          - script: |
              set -ex
              kubectl rollout status daemonset/azure-cni-windows -n kube-system
              kubectl get pods -A
            name: "WaitForCNI"
            displayName: "Wait For CNI"
      - template: ../k8s-e2e/k8s-e2e-job-template.yaml
        parameters:
          sub: $(TEST_SUB_SERVICE_CONNECTION)
          clusterName: ${{ parameters.clusterName }}-$(commitID)
          os: ${{ parameters.os }}
          dependsOn: update_cni
          datapath: true
          dns: true
          portforward: true
          service: true
          hostport: true
      - job: deploy_pods
        dependsOn: cni_k8se2e
        steps:
          - template: ../load-test-templates/pod-deployment-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              scaleup: ${LINUX_SCALEUP} # Add to pipeline Variables
              os: ${{ parameters.os }}
              iterations: ${LINUX_ITERATIONS} # Add to pipeline Variables
      - job: validate_state
        dependsOn: deploy_pods
        steps:
          - template: ../load-test-templates/validate-state-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              os: ${{ parameters.os }}
              restartCase: "true"

