pr:
  branches:
    include:
      - master
  paths:
    include:
    - "zapai/*"
    - "azure-ipam/*"
    - "dropgz/*"
    exclude:
    - "*"

trigger:
  paths:
    include:
    - "zapai/*"
    - "azure-ipam/*"
    - "dropgz/*"
    exclude:
    - "*"
  tags:
    include:
    - "zapai/*"
    - "azure-ipam/*"
    - "dropgz/*"
    exclude:
    - "v*"

stages:
  - stage: setup
    displayName: ACN
    jobs:
      - job: env
        displayName: Setup
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              BUILD_NUMBER=$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=StorageID;isOutput=true]$(echo ${BUILD_NUMBER//./-})"
              echo "##vso[task.setvariable variable=Tag;isOutput=true]$(make version)"
              echo "##vso[task.setvariable variable=cniVersion;isOutput=true]$(make cni-version)"
              echo "##vso[task.setvariable variable=npmVersion;isOutput=true]$(make npm-version)"
              cat /etc/os-release
              uname -a
              sudo chown -R $(whoami):$(whoami) .
              go version
              go env
              which go
              echo $PATH
            name: "EnvironmentalVariables"
            displayName: "Set environmental variables"
            condition: always()

  - stage: test
    displayName: Test ACN
    dependsOn:
      - setup
    jobs:
      - job: test
        displayName: Run Tests
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              make tools
              sudo -E env "PATH=$PATH" make test-azure-ipam;
            retryCountOnTaskFailure: 3
            name: "Test"
            displayName: "Run Tests"

  - stage: binaries
    displayName: Build Binaries
    dependsOn:
      - setup
      - test
    jobs:
      - job: build
        displayName: Build Binaries
        variables:
          STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              make all-binaries-platforms
            name: "BuildAllPlatformBinaries"
            displayName: "Build all platform binaries"

          - script: |
              mkdir -p ./output/bins
              cd ./output
              find . -name '*.tgz' -print -exec mv -t ./bins/ {} +
              find . -name '*.zip' -print -exec mv -t ./bins/ {} +
              shopt -s extglob
              rm -rf !("bins")
            name: "PrepareArtifacts"
            displayName: "Prepare Artifacts"

          - task: CopyFiles@2
            inputs:
              sourceFolder: "output"
              targetFolder: $(Build.ArtifactStagingDirectory)
            condition: succeeded()

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: "output"
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
            condition: succeeded()

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              inlineScript: |
                echo Creating storage container with name acn-$(STORAGE_ID) and account name $(STORAGE_ACCOUNT_NAME)
                az storage container create -n acn-$(STORAGE_ID) --account-name $(STORAGE_ACCOUNT_NAME) --public-access container
                az storage blob upload-batch -d acn-$(STORAGE_ID) -s ./output/bins/  --account-name $(STORAGE_ACCOUNT_NAME)
            displayName: Create artifact storage container
            condition: succeeded()

          - publish: ./test/apimodels/
            artifact: clusterdefinitions

  - stage: containerize
    displayName: Build Images
    dependsOn:
      - setup
      - test
    jobs:
      - job: containerize_amd64
        displayName: Build Images
        pool:
          name: "$(BUILD_POOL_NAME_LINUX_AMD64)"
        strategy:
          matrix:
            cni_dropgz_linux_amd64:
              arch: amd64
              name: cni-dropgz
              os: linux
            cni_dropgz_test_linux_amd64:
              arch: amd64
              name: cni-dropgz-test
              os: linux
            cns_linux_amd64:
              arch: amd64
              name: cns
              os: linux
            cns_windows2019_amd64:
              arch: amd64
              name: cns
              os: windows
              os_version: ltsc2019
            cns_windows2022_amd64:
              arch: amd64
              name: cns
              os: windows
              os_version: ltsc2022
            npm_linux_amd64:
              arch: amd64
              name: npm
              os: linux
            npm_windows2019_amd64:
              arch: amd64
              name: npm
              os: windows
              os_version: ltsc2019
            npm_windows2022_amd64:
              arch: amd64
              name: npm
              os: windows
              os_version: ltsc2022
        steps:
          - template: containers/container-template.yaml
            parameters:
              arch: $(arch)
              name: $(name)
              os: $(os)
              os_version: $(os_version)
      - job: containerize_linux_arm64
        displayName: Build Images
        variables:
          TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
        pool:
          name: "$(BUILD_POOL_NAME_LINUX_ARM64)"
        strategy:
          matrix:
            cni_dropgz_linux_arm64:
              arch: arm64
              name: cni-dropgz
              os: linux
            cni_dropgz_test_linux_arm64:
              arch: arm64
              name: cni-dropgz-test
              os: linux
            cns_linux_arm64:
              arch: arm64
              name: cns
              os: linux
            npm_linux_arm64:
              arch: arm64
              name: npm
              os: linux
        steps:
          - template: containers/container-template.yaml
            parameters:
              arch: $(arch)
              name: $(name)
              os: $(os)

  - stage: publish
    displayName: Publish Multiarch Manifests
    dependsOn:
      - containerize
    jobs:
      - job: manifest
        displayName: Compile Manifests
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            cni_dropgz:
              name: cni-dropgz
              platforms: linux/amd64 linux/arm64
            cni_dropgz_test:
              name: cni-dropgz-test
              platforms: linux/amd64 linux/arm64
            cns:
              name: cns
              os_versions: ltsc2019 ltsc2022
              platforms: linux/amd64 linux/arm64 windows/amd64
            npm:
              name: npm
              os_versions: ltsc2019 ltsc2022
              platforms: linux/amd64 linux/arm64 windows/amd64
        steps:
          - template: containers/manifest-template.yaml
            parameters:
              name: $(name)
              os_versions: $(os_versions)
              platforms: $(platforms)
              tag: $(TAG)

  - template: singletenancy/cilium/cilium-e2e-job-template.yaml
    parameters:
      name: "cilium_e2e"
      displayName: Cilium
      pipelineBuildImage: "$(BUILD_IMAGE)"
      testDropgz: true
      clusterType: swift-no-kube-proxy-up
      clusterName: "submodciliume2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      windowsOsSku: ""
      dependsOn: 'containerize'

  - template: singletenancy/cilium-overlay/cilium-overlay-e2e-job-template.yaml
    parameters:
      name: "cilium_overlay_e2e"
      displayName: Cilium on AKS Overlay
      pipelineBuildImage: "$(BUILD_IMAGE)"
      testDropgz: true
      clusterType: overlay-no-kube-proxy-up
      clusterName: "submodsoverlaye2e"
      vmSize: Standard_B2ms
      k8sVersion: ""
      windowsOsSku: ""
      dependsOn: 'containerize'

  - template: singletenancy/aks-swift/e2e-job-template.yaml
    parameters:
      name: "aks_swift_e2e"
      displayName: AKS Swift
      pipelineBuildImage: "$(BUILD_IMAGE)"
      testDropgz: true
      clusterType: byocni-up
      clusterName: "submodswift"
      osSku: "Ubuntu"
      vmSize: Standard_B2ms
      k8sVersion: ""
      windowsOsSku: ""
      dependsOn: 'containerize'

  - stage: cleanup
    displayName: Cleanup
    dependsOn:
      - cilium_e2e
      - aks_swift_e2e
      - cilium_overlay_e2e
    jobs:
      - job: delete_remote_artifacts
        displayName: Delete remote artifacts
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
          demands: agent.os -equals Linux
        steps:
          - checkout: none
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              inlineScript: |
                BUILD_NUMBER=$(Build.BuildNumber)
                BUILD_NUMBER=${BUILD_NUMBER//./-}
                echo Deleting storage container with name acn-$BUILD_NUMBER and account name $(STORAGE_ACCOUNT_NAME)
                az storage container delete -n acn-$BUILD_NUMBER --account-name $(STORAGE_ACCOUNT_NAME)
            displayName: Cleanup remote Azure storage container
