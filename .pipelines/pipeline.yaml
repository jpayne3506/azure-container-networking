pr:
  branches:
    include:
      - master
  paths:
    exclude:
    - ".devcontainer"
    - ".hooks"
    - ".vscode"
    - ".github"
    - docs

trigger:
  paths:
    exclude:
    - docs
    - "zapai/*"
    - "azure-ipam/*"
    - "dropgz/*"
  tags:
    include:
    - "*"

stages:
  - stage: setup
    displayName: ACN
    jobs:
      - job: env
        displayName: Setup
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              BUILD_NUMBER=$(Build.BuildNumber)
              echo "##vso[task.setvariable variable=StorageID;isOutput=true]$(echo ${BUILD_NUMBER//./-})"
              echo "##vso[task.setvariable variable=Tag;isOutput=true]$(make version)"
              echo "##vso[task.setvariable variable=cniVersion;isOutput=true]$(make cni-version)"
              echo "##vso[task.setvariable variable=npmVersion;isOutput=true]$(make npm-version)"
              echo "##vso[task.setvariable variable=dropgzVersion;isOutput=true]$(make cni-dropgz-version)"
              cat /etc/os-release
              uname -a
              sudo chown -R $(whoami):$(whoami) .
              go version
              go env
              which go
              echo $PATH
            name: "EnvironmentalVariables"
            displayName: "Set environmental variables"
            condition: always()

  - stage: test
    displayName: Test ACN
    dependsOn:
      - setup
    jobs:
      - job: test
        displayName: Run Tests
        variables:
          STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              make tools
              # run test, echo exit status code to fd 3, pipe output from test to tee, which splits output to stdout and go-junit-report (which converts test output to report.xml), stdout from tee is redirected to fd 4. Take output written to fd 3 (which is the exit code of test), redirect to stdout, pipe to read from stdout then exit with that status code. Read all output from fd 4 (output from tee) and write to top stdout
              { { { {
                    sudo -E env "PATH=$PATH" make test-all;
                    echo $? >&3;
                    } | tee >(build/tools/bin/go-junit-report > report.xml) >&4;
                  } 3>&1;
                } | { read xs; exit $xs; }
              } 4>&1
            retryCountOnTaskFailure: 3
            name: "Test"
            displayName: "Run Tests"

  - stage: test_windows
    displayName: Test ACN Windows
    dependsOn:
      - setup
    jobs:
      - job: test
        displayName: Run Tests
        variables:
          STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT_WINDOWS_ALT)"
        steps:
          - script: |
              cd npm/
              go test ./...
            retryCountOnTaskFailure: 3
            name: "TestWindows"
            displayName: "Run Windows Tests"

  - stage: binaries
    displayName: Build Binaries
    dependsOn:
      - setup
      - test
    jobs:
      - job: build
        displayName: Build Binaries
        variables:
          STORAGE_ID: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.StorageID'] ]
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              make all-binaries-platforms
            name: "BuildAllPlatformBinaries"
            displayName: "Build all platform binaries"

          - script: |
              mkdir -p ./output/bins
              cd ./output
              find . -name '*.tgz' -print -exec mv -t ./bins/ {} +
              find . -name '*.zip' -print -exec mv -t ./bins/ {} +
              shopt -s extglob
              rm -rf !("bins")
            name: "PrepareArtifacts"
            displayName: "Prepare Artifacts"

          - task: CopyFiles@2
            inputs:
              sourceFolder: "output"
              targetFolder: $(Build.ArtifactStagingDirectory)
            condition: succeeded()

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: "output"
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
            condition: succeeded()

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              inlineScript: |
                echo Creating storage container with name acn-$(STORAGE_ID) and account name $(STORAGE_ACCOUNT_NAME)
                az storage container create -n acn-$(STORAGE_ID) --account-name $(STORAGE_ACCOUNT_NAME) --public-access container
                az storage blob upload-batch -d acn-$(STORAGE_ID) -s ./output/bins/  --account-name $(STORAGE_ACCOUNT_NAME)
            displayName: Create artifact storage container
            condition: succeeded()

          - publish: ./test/apimodels/
            artifact: clusterdefinitions

  - stage: containerize
    displayName: Build Images
    dependsOn:
      - setup
      - test
    jobs:
      - job: containerize_amd64
        displayName: Build Images
        pool:
          name: "$(BUILD_POOL_NAME_LINUX_AMD64)"
        strategy:
          matrix:
            cni_dropgz_linux_amd64:
              arch: amd64
              name: cni-dropgz
              os: linux
            cni_dropgz_test_linux_amd64:
              arch: amd64
              name: cni-dropgz-test
              os: linux
            cni_plugin_windows2022_amd64:
              os: windows
              name: cni-plugin
              arch: amd64
              os_version: ltsc2022
            cni_plugin_windows2019_amd64:
              os: windows
              name: cni-plugin
              arch: amd64
              os_version: ltsc2019
            cns_linux_amd64:
              arch: amd64
              name: cns
              os: linux
            cns_windows2019_amd64:
              arch: amd64
              name: cns
              os: windows
              os_version: ltsc2019
            cns_windows2022_amd64:
              arch: amd64
              name: cns
              os: windows
              os_version: ltsc2022
            npm_linux_amd64:
              arch: amd64
              name: npm
              os: linux
            npm_windows2022_amd64:
              arch: amd64
              name: npm
              os: windows
              os_version: ltsc2022
        steps:
          - template: containers/container-template.yaml
            parameters:
              arch: $(arch)
              name: $(name)
              os: $(os)
              os_version: $(os_version)
      - job: containerize_linux_arm64
        displayName: Build Images
        variables:
          TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
        pool:
          name: "$(BUILD_POOL_NAME_LINUX_ARM64)"
        strategy:
          matrix:
            cni_dropgz_linux_arm64:
              arch: arm64
              name: cni-dropgz
              os: linux
            cni_dropgz_test_linux_arm64:
              arch: arm64
              name: cni-dropgz-test
              os: linux
            cns_linux_arm64:
              arch: arm64
              name: cns
              os: linux
            npm_linux_arm64:
              arch: arm64
              name: npm
              os: linux
        steps:
          - template: containers/container-template.yaml
            parameters:
              arch: $(arch)
              name: $(name)
              os: $(os)
      - job: check_tag
        displayName: Check Tag
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - script: |
              echo "##vso[task.setvariable variable=currentTagBuild;isOutput=true]$(make version)"
            name: "CurrentTagBuild"
            displayName: "Set current tag variable"
            condition: always()

  - stage: validate1
    displayName: Validate Tags
    dependsOn:
      - setup
      - containerize
    variables:
      TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
      CURRENT_VERSION: $[ stagedependencies.containerize.check_tag.outputs['CurrentTagBuild.currentTagBuild'] ]
    condition: ne(variables.TAG, variables.CURRENT_VERSION)
    jobs:
      - job: timeout_and_cancel
        displayName: Cancel Run
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - script: |
              echo $TAG
              echo $CURRENT_VERSION
              echo "Checking if branch up to date with master"

  - stage: publish
    displayName: Publish Multiarch Manifests
    dependsOn:
      - containerize
    variables:
      TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
      CURRENT_VERSION: $[ stagedependencies.containerize.check_tag.outputs['CurrentTagBuild.currentTagBuild'] ]
      Packaging.EnableSBOMSigning: false
    condition: and(succeeded(), eq(variables.TAG, variables.CURRENT_VERSION))
    jobs:
      - job: manifest
        displayName: Compile Manifests
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            cni_dropgz:
              name: cni-dropgz
              platforms: linux/amd64 linux/arm64
            cni_dropgz_test:
              name: cni-dropgz-test
              platforms: linux/amd64 linux/arm64
            cns:
              name: cns
              os_versions: ltsc2019 ltsc2022
              platforms: linux/amd64 linux/arm64 windows/amd64
            npm:
              name: npm
              os_versions: ltsc2022
              platforms: linux/amd64 linux/arm64 windows/amd64
        steps:
          - template: containers/manifest-template.yaml
            parameters:
              name: $(name)
              os_versions: $(os_versions)
              platforms: $(platforms)
              tag: $(TAG)
      - job: check_tag
        displayName: Check Tag
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - script: |
              echo "##vso[task.setvariable variable=currentTagManifests;isOutput=true]$(make version)"
            name: "CurrentTagManifests"
            displayName: "Set current tag variable"
            condition: always()

  - stage: cluster
    displayName: Create Clusters
    dependsOn:
      - containerize # Timing off of publish stage. Don't want clusters sitting doing nothing
    jobs:
      - job: create_cluster
        displayName: Create
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            cilium_e2e:
              displayName: Cilium
              clusterType: swift-no-kube-proxy-up
              clusterName: 'cilium_e2e'
              vmSize: Standard_B2ms
              k8sVersion: ""
              windowsOsSku: ""
            cilium_overlay_cilium_e2e:
              displayName: Cilium on AKS Overlay
              clusterType: overlay-no-kube-proxy-up
              clusterName: 'overlaye2e'
              vmSize: Standard_B2ms
              k8sVersion: ""
              windowsOsSku: ""
            aks_swift_e2e:
              displayName: AKS Swift Ubuntu
              clusterType: byocni-up
              clusterName: 'swifte2e'
              vmSize: Standard_B2
              k8sVersion: ""
              windowsOsSku: ""
            aks_ubuntu_22_linux_e2e:
              displayName: AKS Ubuntu 22
              clusterType: linux-cniv1-up
              clusterName: 'ubuntu22e2e'
              vmSize: Standard_B2
              k8sVersion: 1.25
              windowsOsSku: ""
            aks_windows_22_e2e:
              displayName: AKS Windows 2022
              clusterType: windows-cniv1-up
              clusterName: 'win22e2e'
              vmSize: Standard_B2ms
              k8sVersion: ""
              windowsOsSku: 'Windows2022'
        steps:
          - template: singletenancy/aks/e2e-cluster-template.yaml
            parameters:
              displayName: $(displayName)
              clusterType: $(clusterType)
              clusterName: $(clusterName)
              vmSize: $(vmSize)
              k8sVersion: $(k8sVersion)
              windowsOsSku: $(windowsOsSku)

  - template: singletenancy/cilium/cilium-e2e-job-template.yaml
    parameters:
      name: "cilium_e2e"
      displayName: Cilium
      pipelineBuildImage: "$(BUILD_IMAGE)"
      testDropgz: ""
      clusterName: "ciliume2e"

  - template: singletenancy/cilium-overlay/cilium-overlay-e2e-job-template.yaml
    parameters:
      name: "cilium_overlay_cilium_e2e"
      displayName: Cilium on AKS Overlay
      pipelineBuildImage: "$(BUILD_IMAGE)"
      testDropgz: ""
      clusterName: "overlaye2e"

  - template: singletenancy/aks-swift/e2e-job-template.yaml
    parameters:
      name: "aks_swift_e2e"
      displayName: AKS Swift Ubuntu
      pipelineBuildImage: "$(BUILD_IMAGE)"
      testDropgz: ""
      clusterName: "swifte2e"
      osSku: "Ubuntu"

  - template: singletenancy/aks/e2e-job-template.yaml
    parameters:
      name: "aks_ubuntu_18_04_linux_e2e"
      displayName: AKS Ubuntu 18.04
      arch: 'amd64'
      os: 'linux'
      clusterType: linux-cniv1-up
      clusterName: 'ubuntu18e2e'
      vmSize: Standard_B2
      k8sVersion: 1.24.9
      scaleup: 100

  - template: singletenancy/aks/e2e-job-template.yaml
    parameters:
      name: "aks_ubuntu_22_linux_e2e"
      displayName: AKS Ubuntu 22
      arch: 'amd64'
      os: 'linux'
      clusterType: linux-cniv1-up
      clusterName: 'ubuntu22e2e'
      vmSize: Standard_B2
      k8sVersion: 1.25
      scaleup: 100

  - template: singletenancy/aks/e2e-job-template.yaml
    parameters:
      name: "aks_windows_19_03_e2e"
      displayName: AKS Windows 1903
      arch: amd64
      os: windows
      clusterType: windows-cniv1-up
      clusterName: 'win19e2e'
      vmSize: Standard_B2ms
      windowsOsSku: 'Windows2019'
      os_version: 'ltsc2019'
      scaleup: 100

  - template: singletenancy/aks/e2e-job-template.yaml
    parameters:
      name: "aks_windows_22_e2e"
      displayName: AKS Windows 2022
      arch: amd64
      os: windows
      clusterType: windows-cniv1-up
      clusterName: 'win22e2e'
      vmSize: Standard_B2ms
      windowsOsSku: 'Windows2022'
      os_version: 'ltsc2022'
      scaleup: 50

  - stage: validate2
    displayName: Validate Tags
    dependsOn:
      - setup
      - publish
    variables:
      TAG: $[ stagedependencies.setup.env.outputs['EnvironmentalVariables.Tag'] ]
      CURRENT_VERSION: $[ stagedependencies.publish.check_tag.outputs['CurrentTagManifests.currentTagManifests'] ]
    condition: ne(variables.TAG, variables.CURRENT_VERSION)
    jobs:
      - job: timeout_and_cancel
        displayName: Cancel Run
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - script: |
              echo $TAG
              echo $CURRENT_VERSION
              echo "Checking if branch is up to date with master"

  - stage: cleanup
    displayName: Cleanup
    dependsOn:
      - "aks_swift_e2e"
      - "cilium_e2e"
      - "cilium_overlay_cilium_e2e"
      - "aks_ubuntu_18_04_linux_e2e"
      - "aks_windows_19_03_e2e"
      - "aks_ubuntu_22_linux_e2e"
      - "aks_windows_22_e2e"
    jobs:
      - job: delete_remote_artifacts
        displayName: Delete remote artifacts
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
          demands: agent.os -equals Linux
        steps:
          - checkout: none
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              inlineScript: |
                BUILD_NUMBER=$(Build.BuildNumber)
                BUILD_NUMBER=${BUILD_NUMBER//./-}
                echo Deleting storage container with name acn-$BUILD_NUMBER and account name $(STORAGE_ACCOUNT_NAME)
                az storage container delete -n acn-$BUILD_NUMBER --account-name $(STORAGE_ACCOUNT_NAME)
            displayName: Cleanup remote Azure storage container
